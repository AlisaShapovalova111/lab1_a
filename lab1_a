#include <iostream>
#include <string>
#include <vector>
#include <memory>
using namespace std;

enum BookType { Fiction, NonFiction };

class Book {
public:
Book(const string& author, const string& title, BookType type) :_author(author), _title(title), _type(type) {};
virtual ~Book() {};
BookType getType() const { return _type; };
string GetAuthor() const { return _author; };
string GetTitle() const { return _title; };
private:
string _author;
string _title;
BookType _type;
};

class Library {
public:

void addBook(const string& author, const string& title, const BookType& type) {
if (author.empty() or title.empty()) {
cout « "error" « endl;
}
books.push_back (Book(author, title, type));
};
vector <Book> books;
};
void countBooksSwitch(const vector <Book>& books) {
int countFiction = 0;
int countNonFiction = 0;
for (const Book& book : books) {
switch (book.getType()) {
case BookType::Fiction:
++countFiction;
break;
case BookType::NonFiction:
++countNonFiction;
break;
}
}
cout « "count of Fiction but with switch:" « countFiction « endl;
cout « "count of non Fiction but wuth switch:" « countNonFiction « endl;
}
void countBooksNoSwitch(const vector <Book>& books) {
int countFiction = 0;
int countNonFiction = 0;
for (const Book& book : books) {
if (book.getType() == BookType::Fiction) {
++countFiction;
}
else {
++countNonFiction;
}
}
cout « "count of fiction:" « countFiction « endl;
cout « "count of non fiction:" « countNonFiction « endl;
}

int main() {
Library myLibrary;
myLibrary.addBook("Agatha Christie", "Murder on the Orient Express", Fiction);
myLibrary.addBook("J.K. Rowling", "Harry Potter and the Philosopher's Stone", Fiction);
myLibrary.addBook("George Orwell", "1984", Fiction);
myLibrary.addBook("Stephen Hawking", "A Brief History of Time", NonFiction);
myLibrary.addBook("Nassim Nicholas Taleb", "The Black Swan", NonFiction);
myLibrary.addBook("Michael Lewis", "Flash Boys", NonFiction);
countBooksSwitch(myLibrary.books);
countBooksNoSwitch(myLibrary.books);
return 0;

}
